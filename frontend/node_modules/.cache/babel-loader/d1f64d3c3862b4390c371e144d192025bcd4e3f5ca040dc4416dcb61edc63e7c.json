{"ast":null,"code":"var _jsxFileName = \"C:\\\\git\\\\Nova pasta\\\\Morevent\\\\frontend\\\\src\\\\pages\\\\meus-certificados\\\\tela_Certificados.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport './tela_Certificados.css';\nimport Header from '../../components/HeaderMorEvent/Header';\nimport BarraLateral from '../../components/BarraLateral/BarraLateral';\nimport Letreiro from '../../components/LetreiroCertificados/Letreiro';\nimport Filtro from '../../components/FiltroCertificados/Filtro';\nimport Aba from '../../components/AbaCertificados/Aba';\nimport Certificados from '../../components/SessaoCertificados/Certificados';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tela_Certificados() {\n  _s();\n  const [certificados, setCertificados] = useState([]); /*Uma declaração de estado. Criamos uma variável\n                                                        chamada certificados e uma função chamada setCertificados que pode ser utilizada pada atualizar\n                                                        o valor do estado. O valor inicial é um array vazio. Quando chamamos a função setCertificados,\n                                                        essa lista é atualizadas*/\n\n  useEffect(() => {\n    axios.get('http://localhost:3001').then(response => {\n      setCertificados(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  /*Através do useEffect, a função é executada sempre que o componente é renderizado, a menos\n  que as dependências não tenham mudado desde a última atualização.\n  Ele recebe dois parâmetros:uma função e um array de dependências.\n  Nesse caso, o use effect está sendo utilizado para fazer uma solicitação HTTP get para a rota\n  \"/\" usando o axios. Quando a solicitação é concluída, a função \"setCertificados é chamada para \n  atualizar o estado do componente.*/\n  /*Em React, um array de dependência é uma lista de valores que um hook depende. \n  Quando um desses valores mudar, o hook é chamado novamente\n  O React compara os valores atuais das dependências com os valores que estavam no array na \n  última vez que o hook foi executado. Se todos os valores forem os mesmos, o hook \n  não é chamado novamente. Se algum valor tiver mudado, o hook é chamado novamente e \n  os valores atuais são passados como argumentos.*/\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BarraLateral, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Letreiro, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filtro, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Aba, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: certificados.map(certificado => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Certificados, {\n          nome: certificado.nome,\n          situacao: certificado.situacao,\n          nCertificado: certificado.nCertificado\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, certificado.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(Tela_Certificados, \"toK5pOBni9RinsGVMoS7CLDl/LM=\");\n_c = Tela_Certificados;\nexport default Tela_Certificados;\nvar _c;\n$RefreshReg$(_c, \"Tela_Certificados\");","map":{"version":3,"names":["React","useState","useEffect","Header","BarraLateral","Letreiro","Filtro","Aba","Certificados","axios","jsxDEV","_jsxDEV","Tela_Certificados","_s","certificados","setCertificados","get","then","response","data","catch","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","certificado","nome","situacao","nCertificado","id","_c","$RefreshReg$"],"sources":["C:/git/Nova pasta/Morevent/frontend/src/pages/meus-certificados/tela_Certificados.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useEffect } from 'react';\nimport './tela_Certificados.css';\nimport Header from '../../components/HeaderMorEvent/Header';\nimport BarraLateral from '../../components/BarraLateral/BarraLateral';\nimport Letreiro from '../../components/LetreiroCertificados/Letreiro';\nimport Filtro from '../../components/FiltroCertificados/Filtro';\nimport Aba from '../../components/AbaCertificados/Aba';\nimport Certificados from '../../components/SessaoCertificados/Certificados';\nimport axios from 'axios';\n\n\nfunction Tela_Certificados() {\n  const [certificados, setCertificados] = useState([]); /*Uma declaração de estado. Criamos uma variável\n  chamada certificados e uma função chamada setCertificados que pode ser utilizada pada atualizar\n  o valor do estado. O valor inicial é um array vazio. Quando chamamos a função setCertificados,\n  essa lista é atualizadas*/\n\n  useEffect(() => \n  {\n    axios.get('http://localhost:3001')\n      .then(response => {\n        setCertificados(response.data);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, []);\n    /*Através do useEffect, a função é executada sempre que o componente é renderizado, a menos\n    que as dependências não tenham mudado desde a última atualização.\n    Ele recebe dois parâmetros:uma função e um array de dependências.\n    Nesse caso, o use effect está sendo utilizado para fazer uma solicitação HTTP get para a rota\n    \"/\" usando o axios. Quando a solicitação é concluída, a função \"setCertificados é chamada para \n    atualizar o estado do componente.*/\n    /*Em React, um array de dependência é uma lista de valores que um hook depende. \n    Quando um desses valores mudar, o hook é chamado novamente\n    O React compara os valores atuais das dependências com os valores que estavam no array na \n    última vez que o hook foi executado. Se todos os valores forem os mesmos, o hook \n    não é chamado novamente. Se algum valor tiver mudado, o hook é chamado novamente e \n    os valores atuais são passados como argumentos.*/\n  return (\n    <div>\n      <Header />\n      <BarraLateral />\n      <Letreiro />\n      <Filtro />\n      <Aba />\n      <div>\n        {certificados.map(certificado => (\n          <div key={certificado.id}>\n            <Certificados\n              nome={certificado.nome} \n              situacao={certificado.situacao} \n              nCertificado={certificado.nCertificado} \n            />\n          </div>\n        ))}\n      </div>\n      {/* O método map é usado para iterar sobre todos os itens do array certificados\n      e criar um elemento HTML para cada item no array.\n      A key {certificado.id} é usada pelo rect para identificar os elementos em um array. \n      Quando os elementos são renderizados, cada um precisa ter um identificador único.\n      Se o ID não for fornecido, o REACT usará o índice do elemento.\n      */}\n      {/*Para cada item, um objeto do tipo certificadO é criado com as informações\n      nome, situacao e nCertificado para ser exibido na tela.\n      */}\n      {/*Esses itens são enviados através de props para o componente Certificados,\n      onde vamos estiliza-los*/}\n    </div>\n  );\n}\n\nexport default Tela_Certificados;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAO,yBAAyB;AAChC,OAAOC,MAAM,MAAM,wCAAwC;AAC3D,OAAOC,YAAY,MAAM,4CAA4C;AACrE,OAAOC,QAAQ,MAAM,gDAAgD;AACrE,OAAOC,MAAM,MAAM,4CAA4C;AAC/D,OAAOC,GAAG,MAAM,sCAAsC;AACtD,OAAOC,YAAY,MAAM,kDAAkD;AAC3E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AACxD;AACA;AACA;;EAEEC,SAAS,CAAC,MACV;IACEO,KAAK,CAACO,GAAG,CAAC,uBAAuB,CAAC,CAC/BC,IAAI,CAACC,QAAQ,IAAI;MAChBH,eAAe,CAACG,QAAQ,CAACC,IAAI,CAAC;IAChC,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACJ;AACJ;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;EACE,oBACEV,OAAA;IAAAa,QAAA,gBACEb,OAAA,CAACR,MAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVjB,OAAA,CAACP,YAAY;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChBjB,OAAA,CAACN,QAAQ;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACZjB,OAAA,CAACL,MAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVjB,OAAA,CAACJ,GAAG;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACPjB,OAAA;MAAAa,QAAA,EACGV,YAAY,CAACe,GAAG,CAACC,WAAW,iBAC3BnB,OAAA;QAAAa,QAAA,eACEb,OAAA,CAACH,YAAY;UACXuB,IAAI,EAAED,WAAW,CAACC,IAAK;UACvBC,QAAQ,EAAEF,WAAW,CAACE,QAAS;UAC/BC,YAAY,EAAEH,WAAW,CAACG;QAAa;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxC;MAAC,GALME,WAAW,CAACI,EAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMnB,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAYH,CAAC;AAEV;AAACf,EAAA,CA3DQD,iBAAiB;AAAAuB,EAAA,GAAjBvB,iBAAiB;AA6D1B,eAAeA,iBAAiB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}